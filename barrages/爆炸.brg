const Utility = require('../utility')
const Barrage = require('../Barrage')

module.exports = new Barrage({
  methods: {
    createBase(name, data) {
      this.setReference(name, {
        state: {
          ...data,
          x: 200,
          y: 160,
          radius: 10,
          vy: 5,
          centerx: 200,
          centery: 160,
        },
        mutate() {
          if (Math.abs(this.x - this.centerx) > 5) {
            this.x += this.vx
            this.y += this.vy
            this.radius = 40 * 100 / (100 + Math.abs(this.centerx - this.x))
          }else{
            this.x = this.initX
            this.y = Math.random() * 160 + 160 * this.deltay
            this.vx = this.constVx
            this.vy = -(this.y - 160) / ((200 - this.x) / this.vx)
            this.radius = 10
          }
        }
      })
    }
  },
  mounted() {
    this.createBase('base1', {color: 'red', constVx: 5, vx: 5, initX: -100, Dy: 0, bv: 3})
    this.createBase('base2', {color: 'green', constVx: 5, vx: 5, initX: -100, Dy: 1, bv: 5})
    this.createBase('base3', {color: 'blue', constVx: -5, vx: -5, initX: 500, Dy: 0, bv: 7})
    this.createBase('base4', {color: 'yellow', constVx: -5, vx: -5, initX: 500, Dy: 1, bv: 9})
  },
  mutate(time) {
    for(var i = 1; i <= 4; i++){
      if ((this.ref['base'+i].x - this.ref['base'+i].centerx) ** 2 < 100){
        var num = 13
        this.emitBullets(num,(index) => ({
          state: {
            rel: '',
            radius: 20,
            color: this.ref['base' + i].color,
            x: 200,
            y: 160,
            theta: Math.PI * 2 / num * (index + Math.random()),
            v: Math.random()*6 + 3//this.ref['base' + i].bulletv,
          },
          mutate(time){
            this.x += this.v * Math.cos(this.theta)
            this.y += this.v * Math.sin(this.theta)
          }
        }))
        this.emitA = false
      }
    }
  }
})