const { Utility } = API

module.exports = {
  reference: {
    base: {
      layer: 2,
      state: {
        x: 240,
        y: 280,
        radius: 5,
        color: 'yellow',
        hasemit: false,
        w: 1 / 5000,
      },
      mounted(){
        this.setNextTick(() => {
          this.emitBullets({
            layer: 1,
            state:{
              x: -245,
              y: -285,
              radius: 5,
              r: 160,
              color: 'violet',
              w: 1 / 5000, 
            },
            mutate(time){
              if(time > 1000){
                this.x = this.r * Math.cos(time * this.w * Math.PI)
                this.y = this.r * Math.sin(time * this.w * Math.PI)
              }
            },
            events:{
              hitSelf(){}
            }
          })
        })
        this.setTimeout(1000,() => {
          this.setInterval(1000, () => {
            var ex = this.x + 240
            var ey = this.y + 280
            var vx = (240 - ex) / 160
            var vy = (280 - ey) / 160
            var v = 10
            var bulletdist = 20
            this.emitBullets(3,(index) => ({
              layer: 1,
              state:{
                //rel: 'src',
                x: ex - vx * index * bulletdist,
                y: ey - vy * index * bulletdist,
                radius: 5,
                r: 45,
                color: 'violet',
                vis: true,
                ax: vx,
                ay: vy,
              },
              mounted(){
                this.setInterval(10,() => {
                  this.x += vx * v
                  this.y += vy * v
                })
              },
              display(){
                if (!this.vis) return
                var context = this.context
                var gradient = context.createRadialGradient(this.x, this.y, 0,this.x, this.y, this.r * 1.1)
                gradient.addColorStop(0, 'white')
                gradient.addColorStop(0.75, this.color)
                gradient.addColorStop(1, 'white')
                context.fillStyle = gradient
                context.beginPath()
                context.arc(this.x, this.y, this.r * 1.1, 0, Math.PI * 2, true)
                context.closePath()
                context.fill()
              },
              events:{
                hitSelf(){
                  this.link.self.hp -= 1
                  this.vis = false
                  this.setInterval(50, 3, () => {
                    var self = this.link.self
                    var v = 25
                    self.x += this.ax * v
                    self.y += this.ay * v
                  })
                }
              },
              listener:{
                hitSelf(){
                  if (!this.vis) return false
                  const self = this.link.self
                  const dist = Math.sqrt((self.x - this.x)**2 + (self.y - this.y)**2)
                  if (dist < this.r){
                    return true
                  }
                }
              }
            }))
          })
        });
      },
      mutate(time) {
        if (time > 1000){
          this.x = 160 * Math.cos(time * this.w * Math.PI)
          this.y = 160 * Math.sin(time * this.w * Math.PI)
        }
        
        if (!this.hasemit){
          this.hasemit = true
          this.emitBullets({
            layer: 0,
            state:{
              radius1: 10,
              radius2: 10,
              radius: 10,
              x: 240,
              y: 280,
              damagetime: 0,
            },
            mutate(time){
              if (time < 1000){
                this.radius2 = 10 + 300 * (time / 1000)
                if (time > 500){
                  this.radius1 = 10 + 150 * (time / 1000)**2
                }
              }
            },
            display(){
              var context = this.context
              var gradient = context.createRadialGradient(this.x, this.y, this.radius1,this.x, this.y, this.radius2)
              gradient.addColorStop(0, 'black')
              gradient.addColorStop(0.75, 'orange')
              gradient.addColorStop(1, 'red')
              context.fillStyle = gradient
              context.beginPath()
              context.arc(this.x, this.y, this.radius2, 0, Math.PI * 2, true)
              context.closePath()
              context.fill()
            },
            events:{
              hitSelf(att){
                this.link.self.hp -= att
              }
            },
            listener:{
              hitSelf(){
                if (this.radius2 < 300) return 0
                if (this.timestamp - this.damagetime < 200) return 0
                const self = this.link.self
                const r = this.radius1// + (this.radius2 - this.radius1) / 2
                const dist = Math.sqrt((self.x - 240)**2 + (self.y - 280)**2)
                if (dist > r){
                  var att = (dist - r)**3 * 1000 / (this.radius2 - r)**3
                  att = Math.floor(att)
                  this.damagetime = this.timestamp
                  return att
                }
              }
            }
          })
        }
      },
    }
  },
}