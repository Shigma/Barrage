const Utility = require('../utility')
const Barrage = require('../Barrage')

module.exports = new Barrage({
  // reference 用来管理相关点的信息，属性可以是任何点对象
  // 默认的属性是 base，书写后将具有和 base 相对运动的能力
  // 系统还将在这里插入 self（自机），enemy（敌机）等属性
  // 这里的所有属性可以在 emmiter 中利用 this.ref 访问
  reference: {
    base: {
      y: 200,
      // mutate 可以用来管理变化的属性
      // 参数 time 是当前对象生命周期的时间，以毫秒为单位
      // 系统暂停时所有对象的声明周期也会暂停
      mutate(time) {
        this.theta = time / 1000 * Math.PI
        this.x = 200 + Math.sin(time / 1000) * 100
      }
    }
  },

  // emmiter 控制弹幕的发射器
  // 返回一个要生成的类子弹对象的列表
  emitter(time) {
    // 下面的判断条件相当于每 0.2 秒发射一波子弹
    if (Math.floor(time / 200) > Math.floor(this.timeline / 200)) {
      const result = []
      for (let i = 0; i < 10; i++) {
        // 返回的每一个类子弹对象用于构造 Bullet 对象
        // 每个子弹的每一次基本更新周期包括：
        // 1. move: 根据设定好的 mode 进行移动
        // 2. mutate: 根据提供的 mutate 属性进行状态更新
        // 3. draw: 进行绘图相关工作，可以通过 draw 属性改写
        // 4. listen: 逐一判断每个 event 是否发生，执行相应的回调函数
        result.push({
          // mode 用来管理子弹的坐标系模式，默认为 xyBullet
          // xyBullet 利用 x 和 y 表示坐标，利用 vpho 和 vtheta 表示速度
          // ptBullet 利用 pho 和 theta 表示坐标，利用 dpho 和 dtheta 表示速度
          mode: 'ptBullet',
          state: {
            // state 用来管理子弹的初始状态
            // radius 是半径，color 是颜色，都是必须的参数
            radius: 10,
            color: Utility.rgb(0,
              0.5 - 0.4 * Math.sin(time / 1000),
              0.5 + 0.4 * Math.sin(time / 1000)
            ),
            pho: 0,
            dpho: 2,
            theta: Math.PI / 6 * i,
            dtheta: Math.PI / 200
          },
          // mutate 和上面一样，记录子弹在生命周期时的更新状态
          mutate(time) {
            this.dpho *= 1.02
          },
          // events 用来实现事件的捕获和处理
          // 目前仅仅支持 onLeaveCanvas 事件
          events: {
            onLeaveCanvas: 'auto'
            // 每个事件的回调可以是规定的字符串或函数
            // 'auto' 表示默认回调，在这里指删除该子弹
            // 'none' 表示无回调函数
            // 回调函数的 this 绑定当前 Barrage 对象
            // 回调函数的第一个参数是一个 BulletEvent 对象
          }
        })
      }
      return result
    }
  }
})