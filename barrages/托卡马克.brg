const { Color } = API

module.exports = {
  methods: {
    // 共有 2 个类似的发射源，使用函数可以避免重复的代码
    setRef(id, dir) {
      this.setReference({
        state: {
          x: 240,
          y: 280,
          radius: 20,
          innerR: 10,
          outerR: 32,
          dir: dir, // 运动方向
          phase: 0, // 将会使用事件管理阶段
          phaseTime: 0,
          damageTime: 0, // 控制持续掉血速度
          crColor: Color.rgba(1, 1, 1, 0.8),
          bdColor: Color.rgba(1, 0.6, 0.4, 0.4),
          glColor: Color.rgba(1, 0.2, 0.2, 0.6)
        },
        mutate(time, delta) {
          time -= this.phaseTime // 将 time 设为当前阶段的时间
          if (this.phase === 0) {
            this.y += delta * (time + 1000) / 6000 * this.dir
          } else if (this.phase === 1) {
            if (this.innerR > 50) {
              this.triggerEventOnce('emit') // 这个只会触发一次
            }
            // 在两种状态间平滑地过渡
            this.radius += delta * (time + 1000) / 8000
            this.innerR += delta * (time + 1000) / 16000
            this.outerR += delta * (time + 1000) / 6000
            this.crColor = Color.rgba(1, 1, 1, 0.8 + this.radius / 625)
            this.bdColor = Color.rgba(1,
              0.6 + this.radius / 1250,
              0.4 + this.radius / 1250,
              0.4 - this.radius / 2500)
            this.glColor = Color.rgba(1,
              0.2 + this.radius / 1250,
              0.2 + this.radius / 1250,
              0.6 + this.radius / 1250)
          }
        },
        display() {
          let gradient
          gradient = this.getGradient(
            Color.transparent, this.outerR,
            this.glColor, this.radius)
          this.fillCircle(gradient, this.outerR)
          gradient = this.getGradient(
            this.crColor, this.innerR,
            this.bdColor, this.radius)
          this.fillCircle(gradient)
        },
        listener: {
          hitSelf() {
            const self = this.parent.ref.self
            const r = self.radius + (this.phase ? this.innerR : this.radius)
            return (this._x - self._x) ** 2 + (this._y - self._y) ** 2 < r ** 2
          },
          nextPhase() {
            // 进入下个阶段的条件
            if (this.phase === 0) {
              return this.y > this.context.canvas.height || this.y < 0
            } else if (this.phase === 1) {
              return this.radius > 250
            }
          }
        },
        events: {
          hitSelf() {
            if (this.timestamp - this.damageTime > 200) {
              // 限制掉血速度
              this.parent.ref.self.hp -= 1
              this.damageTime = this.timestamp
            }
          },
          nextPhase() {
            // 记录下个阶段的开始时间
            this.phaseTime = this.timestamp
            this.phase += 1
          },
          emit() {
            this.setInterval(600, () => {
              // 由 ref 来负责发射子弹
              // 当然这部分也可以通过主程序中的 setTimeout 或者事件实现
              this.emitBullets(50, (index) => ({
                layer: 1,
                state: {
                  // 由点对象产生的子弹会自动带有一个名为 src 的 rel
                  // 这个 src 会自动绑定产生它的点对象在它诞生时的位置
                  rel: 'src',
                  radius: 6,
                  color: Color.rgba(1, 1, 1, 0.8)
                },
                mounted() {
                  // 固定弹变为自机相关
                  this.theta = index / 25 + this.getTheta(this.ref.self)
                },
                mutate(time, delta) {
                  if (time < 6000) {
                    const amp = Math.floor(time / 2000) * 36 + 56
                    this.rho = 100 + amp * Math.abs(Math.sin(Math.PI * time / 2000))
                  } else {
                    this.rho += (1 + time / 3200) * delta / 48
                  }
                  // 保持转动
                  this.theta += delta / 16000
                  this.polarLocate()
                }
              }))
            })
          }
        }
      })
    }
  },
  mounted() {
    // 真正的主程序
    this.setRef(1, 1)
    this.setRef(2, -1)
  }
}