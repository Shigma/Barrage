# API 文档

本文档提供了目前所有 API 的使用说明。

为了编写一个弹幕，你需要编辑一个 brg 文件。这个文件使用 JavaScript 作为脚本，文件将输出一个 Barrage 对象。在这个 Barrage 对象中，你不仅可以定义弹幕和子弹的配置，还可以精细地控制每一个子弹在每时每刻的行为。不过不用担心，我们也提供了丰富的 API，使得你可以非常方便地控制所有的一切。

> 提示：如果不加特殊说明，本文中所有的时间都以毫秒为单位。

## 更新周期 ((Update Cycle))

在我们的软件中，无论是子弹，自机，敌机还是整片的弹幕都是 UpdateObject，即更新对象。它通过更新周期来进行管理。了解对象的更新周期可以帮助我们充分地认识弹幕和子弹具有的特性，有利于避免失误和提高性能。

任何一个更新对象都包含下列形式的更新周期：

### 1. timestamp

这是一个更新周期的开始，对象的时间戳将被更新。

### 2. nextTick

这个阶段将完成对象的 nextTick 任务，比如子弹的`destroy()`方法的在弹幕对象中的回调等。它们可以通过`setNextTick()`函数来设置。

### 3. interval

这个阶段将完成对象的 interval 任务，举个例子，弹幕的周期性发射一般都在这里实现。它们可以通过`setInterval()`函数来设置。

### 4. mutate

这个阶段将执行`mutate()`回调函数，用户可以在这里进行子弹速度的更新，或者处理一些难以用`setInterval()`描述的任务。

### 5. listen

这个阶段将逐一判断对象的每一个监视器是否被触发。如果被触发了则会调用相应的回调函数。

### 6. display

这个阶段将完成对象的显示相关的任务，包括图形的渲染等。对于弹幕来说，其拥有的所有子弹的生命周期也将在这里进行一轮触发。

### 7. timeline

这是一个更新周期的结束，对象的时间轴将被更新。

=====

一个更新对象本身具有下面的 API：

? setNextTick(*callback*)
  为更新对象的下个更新周期设定一个回调函数。

>g 状态: 稳定。此 API 将会一直存在。

- callback: 回调函数，带有 2 个参数：
  - time: 当前对象的时间戳。
  - delta: 上个更新周期距今的时间。
  - 返回值: 如果该函数有返回值且为真，那么该任务将被保留至下一个更新周期。否则该任务会被删除。

-----

? setInterval(*interval*, *times*, *period*, *start*, *callback*)
  为更新对象设定一个计时回调。设定开始后的每个*period*中，从*start*起将每隔*interval*触发一次*callback*，共计触发不超过*times*次。
  至少带有 2 个参数*interval*和*callback*。从第三个参数起依次是*times*，*period*，*start*。

>g 状态: 稳定。此 API 将会一直存在。

- interval: 每次执行回调的时间间隔。
- times: 每个周期中执行回调的次数，默认为`Infinity`。
- period: 回调唤醒的一个周期，默认为`Infinity`。
- start: 每个周期中回调触发的开始时间，默认为`0`。
- callback: 回调函数，带有 4 个参数：
  - time: 当前对象的时间戳。
  - delta: 上个更新周期距今的时间。
  - iCount: 当前 period 中的 interval 数，从`0`开始计数。
  - pCount: 当前的 period 数，从`0`开始计数。
- 返回值: 一个实数，表示这个更新对象的编号。

-----

? removeInterval(*id*)
  删除编号为 id 计时回调。

>g 状态: 稳定。此 API 将会一直存在。

- id: 要删除的计时回调的编号。
- 返回值: `true|false`，表示要删除的计时回调是否存在。

-----

? setTimeout(*timeout*, *callback*)
  为更新对象设定一个定时回调。

>g 状态: 稳定。此 API 将会一直存在。

- timeout: 下一次执行距离目前的时间。
- callback: 回调函数，带有 2 个参数：
  - time: 当前对象的时间戳。
  - delta: 上个更新周期距今的时间。

-----

? trigger(*event*, *...args*)
  触发一个名为*event*的事件的回调函数。

>b 状态: 实验。此 API 可能会更改语法或被取代。

- event: 事件的名称。
- args: 事件附带的参数表（一般情况下只有 0 或者 1 个）。
- 返回值: `true|false`，表示是否存在这个事件的回调函数。

## 生命周期 ((Life Cycle))

同更新周期类似，这里的任何对象都有一个生命周期。尽管生命周期的意义不如更新周期那么大，但是它也是一个非常基础的概念。为生命周期提供的支持目前仅有`mounted()`函数一个，在生命周期的其他阶段可以尝试使用 events 来解决。

### 1. create

这个阶段负责对象的构造和初始化工作。

### 2. mount

这个阶段负责对象的编组分配，图层的排列，与渲染器的绑定，时间戳和时间轴的初始化工作。这个阶段完成后会调用回调函数`mounted()`。这个函数的唯一一个参数是该对象的父对象。对于子弹和参考点来说这个父对象就是创建它们的弹幕对象，对于弹幕对象则没有这个参数。

### 3. update

这个阶段便是对象的更新周期，包括运动，渲染，触发各种事件等等都在这里进行。

### 4. destroy

这个阶段中对象将被解绑，从而最后离开页面。

## 弹幕 ((Barrage))

弹幕对象是一个 brg 文件的基础。它管理了一段时间内一批子弹的总和。

? new Barrage({*reference*, *templates*, *mounted*, *mutate*, *events*, *listener*})
  构造一个新的弹幕对象。

>g 状态: 稳定。此 API 将会一直存在。

- reference: 弹幕对象中涉及的参考点对象。
- templates: 要构造的弹幕对象的模板子弹表。
- mounted: 弹幕被挂载时触发的回调函数。
- mutate: 弹幕每个更新周期的回调函数。带有 2 个参数：
  - time: 当前弹幕对象的时间戳。
  - delta: 上个更新周期距今的时间。
- events: 弹幕遭遇事件的回调函数列表。
- listener: 为弹幕提供的监听器列表。

? emitBullets(*start*, *end*, *step*, *callback*)
  在当前弹幕中发射一批子弹。
  至少带有 1 个参数*callback*。从第二个参数起依次是*end*，*start*，*stop*。

>g 状态: 稳定。此 API 将会一直存在。

- start: 起始 index，默认值为`0`。
- end: 终止 index，默认值为`1`。
- step: 步长，默认值为`1`。
- callback: 回调函数，参数是 index:
  - index: 当前的循环变量。
  - 返回值: 要创建的子弹对象。
- callback 也可以直接是子弹对象本身。

? setTemplate(*key*, *template*)
  新建或覆盖一个名为*key*的模板子弹。

>b 状态: 实验。此 API 可能会更改语法或被取代。

- key: 模板的名字。
- template: 模板子弹对象。也可以使用`null`以删除原来的模板子弹。

? setReference(*key*, *reference*)
  新建或覆盖一个名为*key*的参考点。

>b 状态: 实验。此 API 可能会更改语法或被取代。

- key: 参考点的名字。
- reference: 参考点对象。也可以使用`null`以删除原来的参考点。

## 类点 ((Pseudo-point))

大部分时候我们为了处理方便，我们并不需要直接调用点对象的构造函数，而是采用类点来声明一个参考点或子弹，而由弹幕对象来负责对应参考点和子弹的 create 和 mount 流程。因此我们需要介绍一下类点的声明语法。

? {*layer*, *template*, *state*, *events*, *listener*, *mounted*, *mutate*, *display*}
  一个类点对象可能的基本属性。部分属性只能在构造子弹对象时使用。

>g 状态: 稳定。此 API 将会一直存在。

- layer: 子弹的图层编号。渲染时图层号更大的子弹会出现在更上方；图层号相同的子弹，后构造的子弹出现在更上方。图层号的默认值为`0`。
- template: 子弹引用的模板点的名称。如果对应的模板点在之前已经被定义，那么这个子弹将以其为模板，其他的选项将依次覆盖模板中的选项。
- state: 子弹或参考点的初始状态。详见下面的状态说明。
- events: 子弹或参考点的事件回调列表。
- listener: 子弹或参考点的监听器列表。
- mounted: 子弹或参考点的挂载回调函数。带有 1 个参数：
  - barrage: 当前子弹或参考点所在的弹幕对象。
- mutate: 子弹或参考点的更新回调函数。带有 2 个参数：
  - time: 当前子弹或参考点的时间戳。
  - delta: 上个更新周期距今的时间。
- display: 子弹的渲染函数。带有 2 个参数：
  - time: 当前子弹或参考点的时间戳。
  - delta: 上个更新周期距今的时间。

> 注意：对于弹幕构造函数中参考点的`mounted()`函数，它的调用处于父对象的 create 阶段，因此其还没有和渲染器进行绑定，而子弹则没有这个问题。如果想要在参考点构造时访问渲染器或其他弹幕属性，可以使用`setReference()`函数或者给我提 issue。

-----

? {*x, y*, *rho*, *theta*, *radius*, *color*, *show*, *rel*, *style*, ...}
  状态对象的设置参数的基本属性。部分属性只能在构造子弹对象时使用。

>g 状态: 稳定。此 API 将会一直存在。

- x: 对象的 x 坐标，默认为`0`。
- y: 对象的 y 坐标，默认为`0`。
- rho: 对象的极径，只有当使用了极坐标才是必需的。
- theta: 对象的极角，只有当使用了极坐标才是必需的。
- radius: 对象的默认渲染半径。如果`show`被设置为了`false`则不是必需的。
- color: 对象的默认渲染颜色。如果`show`被设置为了`false`则不是必需的。
- show: 对象是否被渲染，默认为`true`。
- rel: 坐标系的参考点，默认为`'base'`。参考下面的坐标系部分。
- style: 子弹对象可能使用的特殊样式。参考下面的渲染函数部分。
- 实际上，我们还可以继续在后面任意添加自定义属性。

## 点 ((Point))

点类是重要的基类，我们的自机，敌机，子弹，参考点都是点类下的对象。

我们为点对象提供了以下原生方法：

? getDistance(*point*)
  获得当前点到另一个点的距离。

>g 状态: 稳定。此 API 将会一直存在。

- point: 另一个点对象，无论它们是否处于同一坐标系中。

-----

? getTheta(*point*)
  获得当前点到另一个点的向量的幅角。

>b 状态: 实验。此 API 可能会更改语法或被取代。

- point: 另一个点对象，无论它们是否处于同一坐标系中。

-----

? movePolar(*rho*, *theta*)
  将直角坐标中的点移动长度为*rho*，角度为*theta*的向量。

>g 状态: 稳定。此 API 将会一直存在。

- rho: 要移动的向量的长度。默认为当前点的 rho 属性。
- theta: 要移动的向量的角度。默认为当前点的 theta 属性。

-----

? polarLocate(*rho*, *theta*)
  将极径为*rho*，极角为*theta*的点定位到当前直角坐标。

>g 状态: 稳定。此 API 将会一直存在。

- rho: 要定位的点的极径。默认为当前点的 rho 属性。
- theta: 要定位的点的极角。默认为当前点的 theta 属性。

> 注意：如果此时的 rel 本身就含有 theta 属性，则极轴会默认指向 theta 方向。

-----

? copy()
  生成当前点的一个静态副本。

>b 状态: 实验。此 API 可能会更改语法或被取代。

## 静态点 ((Static Point))

静态点和点基本上无异，唯一的不同点在于其不会随着生成它的对象而动态更新。因此广泛子弹的参考点中，以实现自机狙等功能。事实上，每个子弹的 ref 都是静态点的列表。

静态点额外增加了下面的方法：

? locate()
  更新静态点的位置。

>b 状态: 实验。此 API 可能会更改语法或被取代。

## 子弹 ((Bullet))

子弹类是点类的子类。子弹类额外增加了一些事件和方法：

? destroy()
  清除一枚子弹。

>g 状态: 稳定。此 API 将会一直存在。

-----

? drawTemplate(*style*)
  调用内置的绘图函数。

>b 状态: 实验。此 API 可能会更改语法或被取代。

- style: 绘图函数的样式。目前仅支持`'border'`一种样式。

-----

? getGradient(*color1*, *color2*, *radius1*, *radius2*)
  获得一种中心渐变色。

>b 状态: 实验。此 API 可能会更改语法或被取代。

- color1: 第一种颜色。
- color2: 第二种颜色。
- radius1: 第一种颜色对应的半径。
- radius2: 第二种颜色对应的半径。
- 返回值: 一个渐变色对象，可用于颜色填充。

-----

? fillCircle(*fill*, *radius*)

>b 状态: 实验。此 API 可能会更改语法或被取代。

- fill: 要填充的颜色，可以是颜色或者渐变。
- radius: 要填充区域的半径，默认值为当前点的 radius 属性。

### 原生事件

- leave: 当子弹离开渲染区域过远时触发。
- border: 当子弹碰撞到屏幕边缘是触发。
- hitSelf: 当子弹命中自机时触发。

## 其他 ((Utility))

Utility 库提供了其他的一些简单的 API，你可以使用下面的方法引入它：

? const Utility = require('../Utility')

这个库提供了以下函数：

? rgb(*red*, *green*, *blue*)
  用三种颜色生成一个 rgb 字符串。
? rgba(*red*, *green*, *blue*, *alpha*)
  用三种颜色以及透明度生成一个 rgba 字符串。

>b 状态: 实验。此 API 可能会更改语法或被取代。

- red: 红色系数。
- green: 绿色系数。
- blue: 蓝色系数。
- alpha: 透明度。
- 返回值: 一个 css 字符串。

> 注意：所有参数都应该是 0 到 1 之间的实数。

-----

? interval(*period*, *previous*, *current*)
  判断*previous*和*current*两个时刻之间是否跨越了*period*周期。

>b 状态: 实验。此 API 可能会更改语法或被取代。

- period: 周期长度。
- previous: 上一时刻。
- current: 下一时刻。
- 返回值: `true|false`判断的结果。

-----

? smooth(*x1*, *x2*, *t*)
  提供*x1*和*x2*两点间的一种较为平滑的过渡。

>b 状态: 实验。此 API 可能会更改语法或被取代。

- x1: 起始值。
- x2: 终止值。
- t: 一个 0 到 1 之间的参数，表明当前进度。
- 返回值: t 参数下的 x 值。

-----

? rpm()
  提供一个随机的正负 1。

>b 状态: 实验。此 API 可能会更改语法或被取代。

- 返回值: `1|-1`。
